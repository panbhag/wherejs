{"name":"Wherejs","tagline":"A JavaScript library to search in JSON arrays, with mongodb like syntax","body":"wherejs\r\n========\r\n\r\nA JavaScript library to search(deep search) in JSON arrays, with mongodb like syntax.\r\n\r\n\r\nDependencies:\r\n------------\r\nunderscore.js\r\n\r\nInstalling\r\n----------\r\ninclude the dependencies and the file where.js in the page you want to use.\r\n\r\n```javascript\r\n<script type=\"text/javascript\" src=\"path_to_underscore.js\"></script>\r\n<script type=\"text/javascript\" src=\"path_to_where.js\"></script>\r\n```\r\n\r\nUsing\r\n-----\r\n\r\nwhere(input,filter)\r\n\r\ninput is an array of objects to be searched in. The original object is not modified\r\n\r\nfilter specifies which records to select. We will understand the format of filter from few examples.\r\n\r\n###Simple Search\r\n\r\nSearch simple strings or numbers\r\n\r\n```javascript\r\n where([1,1,1,2],1); // outputs [1,1,1]\r\n where(['aa','bb','aa','ab','bc'],'aa'); //['aa','aa']\r\n```\r\n\r\nSelecting from a set of elements\r\n\r\n\r\nSearch from a set of numbers or strings\r\n```javascript\r\n//Numbers\r\n where([1,1,3,4],[1,2,4]); // [1,1,4]\r\n//or\r\n where([1,1,3,4],{$in:[1,2,4]}) // [1,1,4]\r\n\r\n//Strings\r\nwhere(['aa','bb','aa','ab','bc'],['aa','ab']); //['aa',,'aa','ab']\r\n```\r\n\r\nAnother operator $nin(not in) does the opposite of $in.\r\n\r\n\r\n###Deep Search in objects\r\n\r\nIn all the below examples users would be referring to the below array.\r\n```javascript\r\nvar users = [\r\n              {name:{fname:'David',lname:'Jones'},age:28, salary:10000 },\r\n              {name:{fname:'James',lname:'Smit'},age:38, salary: 20000 },\r\n              {name:{fname:'Paul',lname:'Lee'},age:19,salary:60000 },\r\n              {name:{fname:'David',lname:'Lee'},age:29,salary:40000 },\r\n           ]\r\n```\r\n\r\nSearch users with first name \"David\"\r\n\r\n```javascript\r\nwhere(users,{name:{fname:'David'}});\r\n //OR\r\nwhere(users,{'name.fname':'David'});\r\n```\r\nThis nesting can go to any level\r\n\r\n###Number Operations(less than, greater than)\r\n\r\nSearch numbers less than 5\r\n\r\n```javascript\r\nwhere([3,4,5,6,7],{$lt:5}) // returns [3,4]\r\n```\r\n\r\nOn objects\r\nSearch users with age greater than 30.\r\n\r\n```javascript\r\nwhere(users,{age:{$gt:30} }); \r\n```\r\nSearch users with age less than 20 and salary greater than 50000\r\n\r\n```javascript\r\nwhere(users,{age:{$lt:20}, salary:{$gt:50000} }); \r\n```\r\nThere are other operators like less than equal to, greater than equal($lte, $gte).\r\n\r\n###String Operations\r\n\r\nAll string operations are case insensitive.\r\n\r\nSearch for strings which start with A\r\n\r\n```javascript\r\nvar input =  [\"Agra\", \"Amritsar\", \"Bangalore\"];\r\nwhere(input, {$startsWith:'A'} );//[\"Agra\",\"Amritsar\"];\r\n```\r\nSimilarly there is a $endsWith operator, and a $regex to match regex\r\n\r\n$contains operator, to search for a string anywhere in the input\r\n\r\n```javascript\r\ninput =    [{x:'aaAaa'},{x:\"bbAaabcd\"},{x:'Baabcd'}];\r\nwhere(input, {x:{$contains:'Aaa'}} ); //[{x:'aaAaa'},{x:\"bbAaabcd\"}];\r\n```\r\n\r\n###Logical Operations\r\nThese operators accepts an array of filters.\r\n\r\n$or: Returns true if any one of the filters return true\r\n\r\nSearch for users with age greater than 30 or salary greater than 50000\r\n\r\n```javascript\r\nwhere(users,{$or:[ {age:{$gt:30}},{salary:{$gt:50000}}] });\r\n```\r\n\r\nSimilarly there are $and(default: all should be true) and $nor(all should be false).\r\n\r\n$not: inverses the output of the filter.\r\n\r\n```javascript\r\nwhere(users,{$not:{fname:'David'}}); \r\n```\r\n\r\n###Condition as a function\r\nThis can be used to give custom filters\r\n\r\nSearch for all even numbers\r\n\r\n```javascript\r\nwhere([3,4,5,6,7],function(o){ return (o%2 == 0) }  ) //  [4,6]\r\n```\r\n\r\nSearch for users whose age is 50\r\n```javascript\r\nwhere(users,{age:function(a){ return a == 50} } )\r\n```\r\n\r\n\r\nDocumentation\r\n-----\r\nwhere(input,filter)\r\n\r\ninput is an array of objects to be searched in. The original object is not modified\r\n\r\nfilter\r\n\r\nif input is an array of basic types then filter can be \r\n\r\n- a basic type\r\n- an array of basic type \r\n- object containing filters\r\n- function with one argument which returns true for every element which has to be selected\r\n              \r\n\r\nif input is an array of objects, then filter can be\r\n\r\n- obeject containing filters\r\n- function\r\n\r\n\r\n####Comparison operators\r\n\r\n- $ne\r\n- $lt\r\n- $lte\r\n- $gt\r\n- $gte\r\n- $in\r\n- $ni\r\n\r\n#####String Operators\r\n- $startsWith\r\n- $endsWith\r\n- $contains\r\n- $regex\r\n\r\n####Logical operators\r\n- $or\r\n- $and\r\n- $not\r\n- $nor\r\n\r\n####Array Operators\r\n- $elemMatch\r\n- $size\r\n- $all\r\n\r\n\r\n","google":"UA-43056626-1","note":"Don't delete this file! It's used internally to help with page regeneration."}